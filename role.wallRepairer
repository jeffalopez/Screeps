var roleBuilder = require('role.builder');

module.exports = {
    // a function to run the logic for this role
    /** @param {Creep} creep */
    run: function(creep) {
        // if target is defined and creep is not in target room
        if (creep.memory.target != undefined && creep.room.name != creep.memory.target) {
            // find exit to target room
            var exit = creep.room.findExitTo(creep.memory.target);
            // move to exit
            creep.moveTo(creep.pos.findClosestByRange(exit), {visualizePathStyle: {stroke: '#ffffff'}});
            // return the function to not do anything else
            return;
        }
        
        // if creep is trying to repair something but has no energy left
        if (creep.memory.working == true && creep.carry.energy == 0) {
            // switch state
            creep.memory.working = false;
            creep.say('ðŸ”„ harvest');
        }
        // if creep is harvesting energy but is full
        else if (creep.memory.working == false && creep.carry.energy == creep.carryCapacity) {
            // switch state
            creep.memory.working = true;
            creep.say('ðŸ”§ walls');
        }
        function repairList(structure, hitLimit){
            return (structure.hits < structure.hitsMax && structure.hits< hitLimit && (structure.hitsMax-structure.hits)>1000);
        }
        // if creep is supposed to repair something
        if (creep.memory.working == true) {
            // find all walls in the room
            var walls = creep.room.find(FIND_STRUCTURES, {
                filter: (s) => s.structureType == STRUCTURE_WALL && s.structureType == STRUCTURE_RAMPART
            });

            const target = [1000, 2000, 10000, 20000, 50000, 100000, 200000, 300000, 400000, 500000, 750000, 1000000, 2000000, 3500000, 5000000];
            var repairs = null;

            // loop with increasing hits
            for (i=0; repairs== null && i < target.length; i++){
                // find a wall with less than equal hits to other walls
                repairs = creep.pos.findClosestByRange(FIND_STRUCTURES, {filter: (structure) =>  repairList(structure, target[i])});
                repairsHere = creep.pos.findClosestByRange(FIND_STRUCTURES, {filter: (structure) =>  repairList(structure, target[i+1])});

                // if there is one
                if (repairsHere){
                if (creep.pos.inRangeTo(repairsHere.pos,3)){
                    repairs = repairsHere;
                
                //if there is one
                //if (repairs!=null){
                //if (creep.pos.inRangeTo(repairs.pos,3)) {
                //repairs = target[i];
                //break;
                //}
                }
            }
        }

            // if we find a wall that has to be repaired
            if (repairs!=null){
                if (creep.repair(repairs) == ERR_NOT_IN_RANGE){
                creep.moveTo(repairs, {visualizePathStyle: {stroke: '#ffffff'}});
                }
            }
            // if we can't find one
            else {
                // look for construction sites
                roleBuilder.run(creep);
            }
        }
        // if creep is supposed to get energy
        else {
            creep.getEnergy(true, true);
        }
    }
};
